name: Docker Registry CI/CD Test

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  # 로컬 Registry (나중에 실제 서버 IP로 변경)
  REGISTRY_URL: localhost:15432
  IMAGE_NAME: testjson

jobs:
  build-and-deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        clean: true
        fetch-depth: 0
        
    - name: Determine environment from branch
      id: env
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "port=15401" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "environment=staging" >> $GITHUB_OUTPUT  
          echo "port=15402" >> $GITHUB_OUTPUT
        else
          echo "environment=development" >> $GITHUB_OUTPUT
          echo "port=15403" >> $GITHUB_OUTPUT
        fi
        
    - name: Set image tag
      id: tag
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        BRANCH_NAME=${BRANCH_NAME//\//-}  # Replace / with -
        SHORT_SHA=${GITHUB_SHA:0:7}
        IMAGE_TAG="${{ steps.env.outputs.environment }}-${BRANCH_NAME}-${SHORT_SHA}"
        echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "📦 Image tag: ${IMAGE_TAG}"
        
    - name: Check Registry connectivity
      run: |
        echo "🔍 Registry 연결 테스트..."
        curl -f http://${{ env.REGISTRY_URL }}/v2/ || (echo "❌ Registry 접근 실패" && exit 1)
        echo "✅ Registry 접근 성공"
        
    - name: Build Docker image
      run: |
        echo "🔨 Docker 이미지 빌드 중..."
        echo "Registry: ${{ env.REGISTRY_URL }}"
        echo "Image: ${{ env.IMAGE_NAME }}"
        echo "Tag: ${{ steps.tag.outputs.tag }}"
        
        docker build -t ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }} . || {
          echo "❌ Docker 빌드 실패"
          echo "=== Docker 로그 ==="
          docker system df
          docker images
          exit 1
        }
        
        echo "✅ Docker 이미지 빌드 완료"
        
    - name: Push to Registry
      run: |
        echo "📤 Registry에 이미지 푸시 중..."
        docker push ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }} || {
          echo "❌ Registry 푸시 실패"
          echo "=== Registry 상태 확인 ==="
          curl -s http://${{ env.REGISTRY_URL }}/v2/_catalog || echo "Registry 카탈로그 조회 실패"
          exit 1
        }
        echo "✅ Registry 푸시 완료"
        
    - name: Deploy locally (Test)
      run: |
        echo "🚀 로컬 테스트 배포 중..."
        
        # 기존 컨테이너 정리
        docker stop testjson-${{ steps.env.outputs.environment }} 2>/dev/null || true
        docker rm testjson-${{ steps.env.outputs.environment }} 2>/dev/null || true
        
        # 새 컨테이너 실행
        docker run -d \
          --name testjson-${{ steps.env.outputs.environment }} \
          -p ${{ steps.env.outputs.port }}:5000 \
          -e ENVIRONMENT=${{ steps.env.outputs.environment }} \
          -e BRANCH=${GITHUB_REF#refs/heads/} \
          -e COMMIT_SHA=${{ github.sha }} \
          ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
          
        echo "⏳ 컨테이너 시작 대기..."
        sleep 10
        
    - name: Health Check
      run: |
        echo "🏥 Health Check 수행 중..."
        
        # Health endpoint 확인
        HEALTH_URL="http://localhost:${{ steps.env.outputs.port }}/health"
        echo "Health Check URL: ${HEALTH_URL}"
        
        for i in {1..5}; do
          if curl -f ${HEALTH_URL}; then
            echo "✅ Health Check 성공!"
            break
          else
            echo "❌ Health Check 실패 (시도 $i/5)"
            if [ $i -eq 5 ]; then
              echo "=== 컨테이너 로그 ==="
              docker logs testjson-${{ steps.env.outputs.environment }}
              exit 1
            fi
            sleep 5
          fi
        done
        
        # 앱 정보 확인
        echo "📋 배포된 앱 정보:"
        curl -s http://localhost:${{ steps.env.outputs.port }}/ || echo "앱 정보 조회 실패"
        
    - name: Deployment Summary
      if: always()
      run: |
        echo "🎯 배포 완료!"
        echo "Environment: ${{ steps.env.outputs.environment }}"
        echo "Image: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}"
        echo "Port: ${{ steps.env.outputs.port }}"
        echo "URL: http://localhost:${{ steps.env.outputs.port }}"
        
        echo "=== Registry 상태 ==="
        curl -s http://${{ env.REGISTRY_URL }}/v2/_catalog | jq . || echo "Registry 조회 실패" 